//---------------------------------------------------------------------------
uniform float4x4 ViewProj;
uniform texture2d image;

uniform float4 border_color;
// advanced border
uniform float4 color1;
uniform float4 color2;
uniform float4 color3;
uniform float4 color4;
uniform float4 b1;
uniform float4 b2;
uniform float4 b3;
uniform float4 b4;
uniform float4 borderInnerEdge;
uniform int borderPatternCount;
//
uniform float4 ColorMaskExclude;
uniform float4 ColorMaskInclude;
//
uniform float circularMaskDist;
//
uniform float4 innerLimits;
//
uniform float colorBlendLerpBack;
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
sampler_state textureSampler {
	//Filter    = Linear;
	Filter    = Bicubic;
	AddressU  = Border;
	AddressV  = Border;
	BorderColor = 00000000;
};


struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
float4 doSampleBackgroundTexture(float2 uv)
{
	return image.Sample(textureSampler, uv);
}
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
float3 jrlerp3(float3 backColor, float3 foreColor, float scaleFactor) {
	if (foreColor.r<.01 && foreColor.g<0.01 && foreColor.b<0.01) {
		// pure black we dont lerp
		return backColor;
	}
	return lerp(backColor, foreColor, scaleFactor);
}
//---------------------------------------------------------------------------





















//---------------------------------------------------------------------------
VertData VSDraw(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}
//---------------------------------------------------------------------------



























//---------------------------------------------------------------------------
float4 PSDrawRectangle(VertData v_in) : TARGET
{
	// check border boundaries
	if (borderPatternCount>0 && (v_in.uv.x <= b1[0] || v_in.uv.y <= b1[1] || v_in.uv.x >= b1[2] || v_in.uv.y >= b1[3])) {
		// in border 1 space
		return color1;
	} else if (borderPatternCount>1 && (v_in.uv.x <= b2[0] || v_in.uv.y <= b2[1] || v_in.uv.x >= b2[2] || v_in.uv.y >= b2[3])) {
		// in border 2 space
		return color2;
	} else if (borderPatternCount>2 && (v_in.uv.x <= b3[0] || v_in.uv.y <= b3[1] || v_in.uv.x >= b3[2] || v_in.uv.y >= b3[3])) {
		// in border 2 space
		return color3;
	} else if (borderPatternCount>3 && (v_in.uv.x <= b4[0] || v_in.uv.y <= b4[1] || v_in.uv.x >= b4[2] || v_in.uv.y >= b4[3])) {
		// in border 2 space
		return color4;
	} else if (borderPatternCount>0) {
		// clip
		clip(-1);
	} else {
	 	// fallback
		return border_color;
	}
	
	return border_color;
}


float4 PSDrawRectangleMask(VertData v_in) : TARGET
{
  // we could do this more easily if we allow passing in a 
	if ((v_in.uv.x <= borderInnerEdge[0] || v_in.uv.y <= borderInnerEdge[1] || v_in.uv.x >= borderInnerEdge[2] || v_in.uv.y >= borderInnerEdge[3])) {
		// in border 2 space
		return ColorMaskExclude;
		}
	return ColorMaskInclude;
}
//---------------------------------------------------------------------------






//---------------------------------------------------------------------------
float cirlcedist(float2 vpos) : TARGET {
	return sqrt( pow(vpos.x - 0.5, 2) + pow(vpos.y - 0.5, 2)) * 2.0;
}





float4 PSDrawCircleMask(VertData v_in) : TARGET
{
	// no masking beyond image
	// ATTN: note that THIS is the code that leaves a thin strip of 1 pixel border where it shouldnt
  //if ((v_in.uv.x <= innerLimits[0] || v_in.uv.y <= innerLimits[1] || v_in.uv.x >= innerLimits[2] || v_in.uv.y >= innerLimits[3])) {
  if ((v_in.uv.x < innerLimits[0] || v_in.uv.y < innerLimits[1] || v_in.uv.x > innerLimits[2] || v_in.uv.y > innerLimits[3])) {
  	return ColorMaskInclude;
  }
  
	// check border boundaries
	if (borderPatternCount>0 && cirlcedist(v_in.uv)>= circularMaskDist) {
		return ColorMaskExclude;
	}
	return ColorMaskInclude;
}



float4 PSDrawCircle(VertData v_in) : TARGET
{
	// check border boundaries
	if (borderPatternCount>0 && cirlcedist(v_in.uv)> 1.0) {
		clip(-1);
	} else if (borderPatternCount>0 && cirlcedist(v_in.uv)>= b1[3]) {
		// in border 1 space
		return color1;
	} else if (borderPatternCount>1 && cirlcedist(v_in.uv)>= b2[3]) {
		// in border 2 space
		return color2;
	} else if (borderPatternCount>2 && cirlcedist(v_in.uv)>= b3[3]) {
		// in border 2 space
		return color3;
	} else if (borderPatternCount>3 && cirlcedist(v_in.uv)>= b4[3]) {
		// in border 2 space
		return color4;
	} else if (borderPatternCount>0) {

  	if (v_in.uv.x <= innerLimits[0] || v_in.uv.y <= innerLimits[1] || v_in.uv.x >= innerLimits[2] || v_in.uv.y >= innerLimits[3]) {
  	// between border and edge of source image
  	return border_color;
  	}
		// clip
		clip(-1);
	} else {
	 	// fallback
		return border_color;
	}
	
	return border_color;
}

//---------------------------------------------------------------------------














//---------------------------------------------------------------------------
float4 PSDrawRectangleBackTex(VertData v_in) : TARGET
{
	// background texture color
	float4 backgroundColor = doSampleBackgroundTexture(v_in.uv);


	// for output
	float4 rgbaout;
	
	// check border boundaries
	if (borderPatternCount>0 && (v_in.uv.x <= b1[0] || v_in.uv.y <= b1[1] || v_in.uv.x >= b1[2] || v_in.uv.y >= b1[3])) {
		// in border 1 space
		rgbaout = color1;
	} else if (borderPatternCount>1 && (v_in.uv.x <= b2[0] || v_in.uv.y <= b2[1] || v_in.uv.x >= b2[2] || v_in.uv.y >= b2[3])) {
		// in border 2 space
		rgbaout = color2;
	} else if (borderPatternCount>2 && (v_in.uv.x <= b3[0] || v_in.uv.y <= b3[1] || v_in.uv.x >= b3[2] || v_in.uv.y >= b3[3])) {
		// in border 2 space
		rgbaout = color3;
	} else if (borderPatternCount>3 && (v_in.uv.x <= b4[0] || v_in.uv.y <= b4[1] || v_in.uv.x >= b4[2] || v_in.uv.y >= b4[3])) {
		// in border 2 space
		rgbaout = color4;
	} else if (borderPatternCount>0) {
		// clip
		clip(-1);
	} else {
	 	// same as color1
		rgbaout = border_color;
	}
	
	// ok now we lerp between the border color and the background texture (but keeping alpha of border?)
	rgbaout.rgb = jrlerp3(backgroundColor.rgb, rgbaout.rgb, colorBlendLerpBack);
	return rgbaout;
}




float4 PSDrawCircleBackTex(VertData v_in) : TARGET
{
	// background texture color
	float4 backgroundColor = doSampleBackgroundTexture(v_in.uv);
	
	// for output
	float4 rgbaout;
	
	// check border boundaries
	if (borderPatternCount>0 && cirlcedist(v_in.uv)> 1.0) {
		clip(-1);
	} else if (borderPatternCount>0 && cirlcedist(v_in.uv)>= b1[3]) {
		// in border 1 space
		rgbaout = color1;
	} else if (borderPatternCount>1 && cirlcedist(v_in.uv)>= b2[3]) {
		// in border 2 space
		rgbaout = color2;
	} else if (borderPatternCount>2 && cirlcedist(v_in.uv)>= b3[3]) {
		// in border 2 space
		rgbaout = color3;
	} else if (borderPatternCount>3 && cirlcedist(v_in.uv)>= b4[3]) {
		// in border 2 space
		rgbaout = color4;
	} else if (borderPatternCount>0) {
  	if (v_in.uv.x <= innerLimits[0] || v_in.uv.y <= innerLimits[1] || v_in.uv.x >= innerLimits[2] || v_in.uv.y >= innerLimits[3]) {
	  	// between border and edge of source image
  		rgbaout = border_color;
  	} else {
			// clip
			clip(-1);
			}
	} else {
	 	// fallback
		rgbaout = border_color;
	}
	
	// ok now we lerp between the border color and the background texture (but keeping alpha of border?)
	rgbaout.rgb = jrlerp3(backgroundColor.rgb, rgbaout.rgb, colorBlendLerpBack);
	return rgbaout;
}
//---------------------------------------------------------------------------











//---------------------------------------------------------------------------
technique DrawRectangle
{
	pass
	{
		vertex_shader = VSDraw(v_in);
		pixel_shader  = PSDrawRectangle(v_in);
	}
}

technique DrawRectangleMask
{
	pass
	{
		vertex_shader = VSDraw(v_in);
		pixel_shader  = PSDrawRectangleMask(v_in);
	}
}
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
technique DrawCircle
{
	pass
	{
		vertex_shader = VSDraw(v_in);
		pixel_shader  = PSDrawCircle(v_in);
	}
}



technique DrawCircleMask
{
	pass
	{
		vertex_shader = VSDraw(v_in);
		pixel_shader  = PSDrawCircleMask(v_in);
	}
}
//---------------------------------------------------------------------------



//---------------------------------------------------------------------------
technique DrawRectangleBackTex
{
	pass
	{
		vertex_shader = VSDraw(v_in);
		pixel_shader  = PSDrawRectangleBackTex(v_in);
	}
}


technique DrawCircleBackTex
{
	pass
	{
		vertex_shader = VSDraw(v_in);
		pixel_shader  = PSDrawCircleBackTex(v_in);
	}
}
//---------------------------------------------------------------------------