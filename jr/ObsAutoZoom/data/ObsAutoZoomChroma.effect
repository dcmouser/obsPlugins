uniform float4x4 ViewProj;
uniform texture2d image;

uniform float4 cb_v4 = { -0.100644, -0.338572,  0.439216, 0.501961 };
uniform float4 cr_v4 = {  0.439216, -0.398942, -0.040274, 0.501961 };

uniform float2 chroma_key1;
uniform float similarity1;
uniform float smoothness1;
//
uniform float2 chroma_key2;
uniform float similarity2;
uniform float smoothness2;
//
uniform float2 pixel_size;
uniform float threshold;




//---------------------------------------------------------------------------

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

sampler_state textureSamplerNearestUnused {
	Filter    = Nearest;
	AddressU  = Clamp;
	AddressV  = Clamp;
};


struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 CalcColor(float4 rgba)
{
	return rgba;
}
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
float GetNonlinearChannel(float u)
{
	return (u <= 0.0031308) ? (12.92 * u) : ((1.055 * pow(u, 1.0 / 2.4)) - 0.055);
}

float3 GetNonlinearColor(float3 rgb)
{
	return float3(GetNonlinearChannel(rgb.r), GetNonlinearChannel(rgb.g), GetNonlinearChannel(rgb.b));
}

float3 SampleTexture(float2 uv)
{
	float3 rgb = image.Sample(textureSampler, uv).rgb;
	return GetNonlinearColor(rgb);
}
//---------------------------------------------------------------------------





//---------------------------------------------------------------------------
float GetChroma1Dist(float3 rgb)
{
	float cb = dot(rgb.rgb, cb_v4.xyz) + cb_v4.w;
	float cr = dot(rgb.rgb, cr_v4.xyz) + cr_v4.w;
	return distance(chroma_key1, float2(cb, cr));
}

float GetChroma2Dist(float3 rgb)
{
	float cb = dot(rgb.rgb, cb_v4.xyz) + cb_v4.w;
	float cr = dot(rgb.rgb, cr_v4.xyz) + cr_v4.w;
	return distance(chroma_key2, float2(cb, cr));
}
//---------------------------------------------------------------------------












//---------------------------------------------------------------------------
float GetBoxFilteredChroma1Dist(float3 rgb, float2 texCoord)
{
	// normal distance to first color only

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);
	float distVal = GetChroma1Dist(SampleTexture(texCoord-point_0));
	distVal += GetChroma1Dist(SampleTexture(texCoord+point_0));
	distVal += GetChroma1Dist(SampleTexture(texCoord-point_1));
	distVal += GetChroma1Dist(SampleTexture(texCoord+point_1));
	distVal *= 2.0;
	distVal += GetChroma1Dist(GetNonlinearColor(rgb));
	return distVal / 9.0;
}

float GetBoxFilteredChroma2Dist(float3 rgb, float2 texCoord)
{
	// normal distance to first color only

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);
	float distVal = GetChroma2Dist(SampleTexture(texCoord-point_0));
	distVal += GetChroma2Dist(SampleTexture(texCoord+point_0));
	distVal += GetChroma2Dist(SampleTexture(texCoord-point_1));
	distVal += GetChroma2Dist(SampleTexture(texCoord+point_1));
	distVal *= 2.0;
	distVal += GetChroma2Dist(GetNonlinearColor(rgb));
	return distVal / 9.0;
}




float2 GetBoxFilteredChromaDistDualSep(float3 rgb, float2 texCoord)
{
	// return 2-tuple of both calculations

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);

	float distVal1 = GetChroma1Dist(SampleTexture(texCoord-point_0));
	distVal1 += GetChroma1Dist(SampleTexture(texCoord+point_0));
	distVal1 += GetChroma1Dist(SampleTexture(texCoord-point_1));
	distVal1 += GetChroma1Dist(SampleTexture(texCoord+point_1));
	distVal1 *= 2.0;
	distVal1 += GetChroma1Dist(GetNonlinearColor(rgb));
	distVal1 /= 9.0;
	float distVal2 = GetChroma2Dist(SampleTexture(texCoord-point_0));
	distVal2 += GetChroma2Dist(SampleTexture(texCoord+point_0));
	distVal2 += GetChroma2Dist(SampleTexture(texCoord-point_1));
	distVal2 += GetChroma2Dist(SampleTexture(texCoord+point_1));
	distVal2 *= 2.0;	
	distVal2 += GetChroma2Dist(GetNonlinearColor(rgb));
	distVal2 /= 9.0;

	return float2(distVal1, distVal2);
}
//---------------------------------------------------------------------------





//---------------------------------------------------------------------------
float4 ProcessChromaKey1Color(float4 rgba, VertData v_in)
{
	float chromaDist = GetBoxFilteredChroma1Dist(rgba.rgb, v_in.uv);
	float baseMask = max(0.0,chromaDist - similarity1);
	float fullMask = pow(saturate(baseMask / smoothness1), 1.5);

	if (fullMask < threshold) {
		rgba = float4(0.0,1.0,0.0,1.0);
	} else {
		rgba = float4(0.0,0.0,0.0, 0.0);
	}
	return rgba;
}


float4 ProcessChromaKey2Color(float4 rgba, VertData v_in)
{
	float chromaDist = GetBoxFilteredChroma2Dist(rgba.rgb, v_in.uv);
	float baseMask = max(0.0, chromaDist - similarity2);
	float fullMask = pow(saturate(baseMask / smoothness2), 1.5);

	if (fullMask < threshold) {
		rgba = float4(1.0,0.0,0.0,1.0);
	} else {
		rgba = float4(0.0,0.0,0.0, 0.0);
	}
	return rgba;
}





float4 ProcessChromaKeyDualSepColor(float4 rgba, VertData v_in)
{
	// return red, green, or black pixel, depending on whether we match chroma 1 or 2 or none; with alpha telling distance

	float dist;
	float baseMask, fullMask;
	//	
	float2 chromaDistDualSep = GetBoxFilteredChromaDistDualSep(rgba.rgb, v_in.uv);
	//
	if (chromaDistDualSep.x < chromaDistDualSep.y) {
		// first color is closer; we use pure RED pixel for this
		dist = chromaDistDualSep.x;
		baseMask = max(0.0, dist - similarity1);
		fullMask = pow(saturate(baseMask / smoothness1), 1.5);
		if (fullMask < threshold) {
			rgba = float4(0.0,1.0,0.0,1.0);
		} else {
			rgba = float4(0.0,0.0,0.0, 0.0);
		}
	} else {
		// second color is closer; we use pure GREEN pixel for this
		dist = chromaDistDualSep.y;
		baseMask = max(0.0,dist - similarity2);
		fullMask = pow(saturate(baseMask / smoothness2), 1.5);
		if (fullMask < threshold) {
			rgba = float4(1.0,0.0,0.0,1.0);
		} else {
			rgba = float4(0.0,0.0,0.0, 0.0);
		}
	}
	
	return rgba;
}
//---------------------------------------------------------------------------














//---------------------------------------------------------------------------
float4 PSChromaKey1(VertData v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	rgba.rgb = max(float3(0.0, 0.0, 0.0), rgba.rgb / rgba.a);

	rgba = ProcessChromaKey1Color(rgba, v_in);
	return rgba;
}

float4 PSChromaKey2(VertData v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	rgba.rgb = max(float3(0.0, 0.0, 0.0), rgba.rgb / rgba.a);

	rgba = ProcessChromaKey2Color(rgba, v_in);
	return rgba;
}

float4 PSChromaKeyDualSep(VertData v_in) : TARGET
{
	// simpler
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	rgba.rgb = max(float3(0.0, 0.0, 0.0), rgba.rgb / rgba.a);

	rgba = ProcessChromaKeyDualSepColor(rgba, v_in);
	return rgba;
}
//---------------------------------------------------------------------------












//---------------------------------------------------------------------------
technique DrawColor1
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKey1(v_in);
	}
}

technique DrawColor2
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKey2(v_in);
	}
}



technique DrawDualSep
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKeyDualSep(v_in);
	}
}
//---------------------------------------------------------------------------

