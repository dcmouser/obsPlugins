uniform float4x4 ViewProj;
uniform texture2d image;

uniform float4 cb_v4 = { -0.100644, -0.338572,  0.439216, 0.501961 };
uniform float4 cr_v4 = {  0.439216, -0.398942, -0.040274, 0.501961 };

uniform float2 chroma_key1;
uniform float similarity1;
uniform float smoothness1;
//
uniform float2 chroma_key2;
uniform float similarity2;
uniform float smoothness2;
//
uniform float2 pixel_size;

// new
uniform float3 color1rgb;
uniform float3 color2rgb;
uniform float3 color1hsv;
uniform float3 color2hsv;
uniform float hueThreshold;
uniform float saturationThreshold;
uniform float valueThreshold;
//
uniform float testThreshold;



//---------------------------------------------------------------------------
// see https://www.chilliant.com/rgb2hsv.html
// As for most pixel shaders, red/green/blue components are in the range zero to one inclusive. For consistency, hue/saturation/value/lightness/chroma/luminance are also in the unit range.
// alternatively see https://www.ronja-tutorials.com/post/041-hsv-colorspace/

 float Epsilon = 0.0000000001; //1e-10;


  float3 RGBtoHCV(in float3 RGB)
  {
    // Based on work by Sam Hocevar and Emil Persson
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0/3.0) : float4(RGB.gb, 0.0, -1.0/3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
    return float3(H, C, Q.x);
  }


  float3 RGBtoHSV(in float3 RGB)
  {
    float3 HCV = RGBtoHCV(RGB);
    float S = HCV.y / (HCV.z + Epsilon);
    return float3(HCV.x, S, HCV.z);
  }


  float3 RGBtoHSL(in float3 RGB)
  {
    float3 HCV = RGBtoHCV(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon);
    return float3(HCV.x, S, L);
  }


  float3 RGBtoHCY(in float3 RGB)
  {
    // Corrected by David Schaeffer
    float3 HCV = RGBtoHCV(RGB);
    float Y = dot(RGB, HCYwts);
    float Z = dot(HUEtoRGB(HCV.x), HCYwts);
    if (Y < Z)
    {
      HCV.y *= Z / (Epsilon + Y);
    }
    else
    {
      HCV.y *= (1 - Z) / (Epsilon + 1 - Y);
    }
    return float3(HCV.x, HCV.y, Y);
  }


  float3 RGBtoHCL(in float3 RGB)
  {
    float3 HCL;
    float H = 0;
    float U = min(RGB.r, min(RGB.g, RGB.b));
    float V = max(RGB.r, max(RGB.g, RGB.b));
    float Q = HCLgamma / HCLy0;
    HCL.y = V - U;
    if (HCL.y != 0)
    {
      H = atan2(RGB.g - RGB.b, RGB.r - RGB.g) / PI;
      Q *= U / V;
    }
    Q = exp(Q);
    HCL.x = frac(H / 2 - min(frac(H), frac(-H)) / 6);
    HCL.y *= Q;
    HCL.z = lerp(-U, V, Q) / (HCLmaxL * 2);
    return HCL;
  }
//---------------------------------------------------------------------------

























//---------------------------------------------------------------------------

sampler_state textureSampler {
	Filter    = Linear;
	AddressU  = Clamp;
	AddressV  = Clamp;
};

sampler_state textureSamplerNearestUnused {
	Filter    = Nearest;
	AddressU  = Clamp;
	AddressV  = Clamp;
};


struct VertData {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
VertData VSDefault(VertData v_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = v_in.uv;
	return vert_out;
}

float4 CalcColor(float4 rgba)
{
	return rgba;
}
//---------------------------------------------------------------------------




//---------------------------------------------------------------------------
float GetNonlinearChannel(float u)
{
	return (u <= 0.0031308) ? (12.92 * u) : ((1.055 * pow(u, 1.0 / 2.4)) - 0.055);
}

float3 GetNonlinearColor(float3 rgb)
{
	return float3(GetNonlinearChannel(rgb.r), GetNonlinearChannel(rgb.g), GetNonlinearChannel(rgb.b));
}

float3 SampleTexture(float2 uv)
{
	float3 rgb = image.Sample(textureSampler, uv).rgb;
	return GetNonlinearColor(rgb);
}
//---------------------------------------------------------------------------





//---------------------------------------------------------------------------
float GetChroma1Dist(float3 rgb)
{
	float cb = dot(rgb.rgb, cb_v4.xyz) + cb_v4.w;
	float cr = dot(rgb.rgb, cr_v4.xyz) + cr_v4.w;
	return distance(chroma_key1, float2(cb, cr));
}

float GetChroma2Dist(float3 rgb)
{
	float cb = dot(rgb.rgb, cb_v4.xyz) + cb_v4.w;
	float cr = dot(rgb.rgb, cr_v4.xyz) + cr_v4.w;
	return distance(chroma_key2, float2(cb, cr));
}
//---------------------------------------------------------------------------












//---------------------------------------------------------------------------
float GetBoxFilteredChroma1Dist(float3 rgb, float2 texCoord)
{
	// normal distance to first color only

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);
	float distVal = GetChroma1Dist(SampleTexture(texCoord-point_0));
	distVal += GetChroma1Dist(SampleTexture(texCoord+point_0));
	distVal += GetChroma1Dist(SampleTexture(texCoord-point_1));
	distVal += GetChroma1Dist(SampleTexture(texCoord+point_1));
	distVal *= 2.0;
	distVal += GetChroma1Dist(GetNonlinearColor(rgb));
	return distVal / 9.0;
}


float GetBoxFilteredChroma2Dist(float3 rgb, float2 texCoord)
{
	// normal distance to first color only

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);
	float distVal = GetChroma2Dist(SampleTexture(texCoord-point_0));
	distVal += GetChroma2Dist(SampleTexture(texCoord+point_0));
	distVal += GetChroma2Dist(SampleTexture(texCoord-point_1));
	distVal += GetChroma2Dist(SampleTexture(texCoord+point_1));
	distVal *= 2.0;
	distVal += GetChroma2Dist(GetNonlinearColor(rgb));
	return distVal / 9.0;
}


float2 GetBoxFilteredChromaDistDualSep(float3 rgb, float2 texCoord)
{
	// return 2-tuple of both calculations

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);

	float distVal1 = GetChroma1Dist(SampleTexture(texCoord-point_0));
	distVal1 += GetChroma1Dist(SampleTexture(texCoord+point_0));
	distVal1 += GetChroma1Dist(SampleTexture(texCoord-point_1));
	distVal1 += GetChroma1Dist(SampleTexture(texCoord+point_1));
	distVal1 *= 2.0;
	distVal1 += GetChroma1Dist(GetNonlinearColor(rgb));
	distVal1 /= 9.0;
	float distVal2 = GetChroma2Dist(SampleTexture(texCoord-point_0));
	distVal2 += GetChroma2Dist(SampleTexture(texCoord+point_0));
	distVal2 += GetChroma2Dist(SampleTexture(texCoord-point_1));
	distVal2 += GetChroma2Dist(SampleTexture(texCoord+point_1));
	distVal2 *= 2.0;	
	distVal2 += GetChroma2Dist(GetNonlinearColor(rgb));
	distVal2 /= 9.0;

	return float2(distVal1, distVal2);
}
//---------------------------------------------------------------------------





//---------------------------------------------------------------------------
float4 ProcessChromaKey1Color(float4 rgba, VertData v_in)
{
	float chromaDist = GetBoxFilteredChroma1Dist(rgba.rgb, v_in.uv);
	float baseMask = max(0.0,chromaDist - similarity1);
	float fullMask = pow(saturate(baseMask / smoothness1), 1.5);

	if (fullMask < testThreshold) {
		rgba = float4(0.0,1.0,0.0,1.0);
	} else {
		rgba = float4(0.0,0.0,0.0, 0.0);
	}
	return rgba;
}


float4 ProcessChromaKey2Color(float4 rgba, VertData v_in)
{
	float chromaDist = GetBoxFilteredChroma2Dist(rgba.rgb, v_in.uv);
	float baseMask = max(0.0, chromaDist - similarity2);
	float fullMask = pow(saturate(baseMask / smoothness2), 1.5);

	if (fullMask < testThreshold) {
		rgba = float4(1.0,0.0,0.0,1.0);
	} else {
		rgba = float4(0.0,0.0,0.0, 0.0);
	}
	return rgba;
}





float4 ProcessChromaKeyDualSepColor(float4 rgba, VertData v_in)
{
	// return red, green, or black pixel, depending on whether we match chroma 1 or 2 or none; with alpha telling distance

	float dist;
	float baseMask, fullMask;
	//	
	float2 chromaDistDualSep = GetBoxFilteredChromaDistDualSep(rgba.rgb, v_in.uv);
	//
	if (chromaDistDualSep.x < chromaDistDualSep.y) {
		// first color is closer; we use pure GREEN pixel for this
		dist = chromaDistDualSep.x;
		baseMask = max(0.0, dist - similarity1);
		fullMask = pow(saturate(baseMask / smoothness1), 1.5);
		if (fullMask < testThreshold) {
			rgba = float4(0.0,1.0,0.0,1.0);
		} else {
			rgba = float4(0.0,0.0,0.0, 0.0);
		}
	} else {
		// second color is closer; we use pure RED pixel for this
		dist = chromaDistDualSep.y;
		baseMask = max(0.0,dist - similarity2);
		fullMask = pow(saturate(baseMask / smoothness2), 1.5);
		if (fullMask < testThreshold) {
			rgba = float4(1.0,0.0,0.0,1.0);
		} else {
			rgba = float4(0.0,0.0,0.0, 0.0);
		}
	}
	
	return rgba;
}
//---------------------------------------------------------------------------














//---------------------------------------------------------------------------
float4 PSChromaKey1(VertData v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	rgba = ProcessChromaKey1Color(rgba, v_in);
	return rgba;
}

float4 PSChromaKey2(VertData v_in) : TARGET
{
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	rgba = ProcessChromaKey2Color(rgba, v_in);
	return rgba;
}

float4 PSChromaKeyDualSep(VertData v_in) : TARGET
{
	// simpler
	float4 rgba = image.Sample(textureSampler, v_in.uv);
	rgba = ProcessChromaKeyDualSepColor(rgba, v_in);
	return rgba;
}
//---------------------------------------------------------------------------




























































//---------------------------------------------------------------------------
float3 SampleHsvTexture(float2 uv)
{
	float3 rgb = image.Sample(textureSampler, uv).rgb;
	return RGBtoHSV(rgb);
}


float4 calcRgbaColorGreenFromHsvDistance(in float dist) : TARGET
{
		if (dist < testThreshold) {
			rgba = float4(0.0,1.0,0.0,1.0);
		} else {
			rgba = float4(0.0,0.0,0.0, 0.0);
		}
		return rgba;
}


float calcHueDistance(float hue1, float hue2)
{
	float rawDist = abs(hsv1.x-hsv2.x);
	// but hue wraps around
	float dist = rawDist > 0.5 ? rawDist-0.5 : rawDist;
	return dist;
}

float calcSatDistance(float sat1, float sat2)
{
	float rawdDist = abs(sat1-sat2);
	return rawDist;
}

float calcValDistance(float val1, float val2)
{
	float rawdDist = abs(val1-val2);
	return rawDist;
}



float GetHsvColor1Dist(float3 hsv1, float3 hsv2)
{
	// get component distances
	float hueDist = calcHueDistance(hsv1.x, hsv2.x);
	float satDist = calcSatDistance(hsv1.y, hsv2.y);
	float valDist = calcValDistance(hsv1.z, hsv2.z);
	
	if (hueDist > hueThreshold) {
		// no good
		return 1.0;
	}
	if (satDist > saturationThreshold) {
		return 1.0;
	}
	if (valDist > value Threshold) {
		return 1.0;
	}
	// close enough on all counts, it's good
	return 0.0;
}


float GetBoxFilteredHsvColor1Dist(float2 texCoord)
{
	// normal distance to first color only

	//float3 c1hsv = color1hsv;
	float3 c1hsv = RGBtoHSV(color1rgb);

	float2 h_pixel_size = pixel_size / 2.0;
	float2 point_0 = float2(pixel_size.x, h_pixel_size.y);
	float2 point_1 = float2(h_pixel_size.x, -pixel_size.y);
	float distVal = GetHsvColorDist(SampleHsvTexture(texCoord-point_0), c1hsv);
	distVal += GetHsvColorDist(SampleHsvTexture(texCoord+point_0), c1hsv);
	distVal += GetHsvColorDist(SampleHsvTexture(texCoord-point_1), c1hsv);
	distVal += GetHsvColorDist(SampleHsvTexture(texCoord+point_1), c1hsv);
	distVal *= 2.0;
	distVal += GetHsvColorDist(SampleHsvTexture(texCoord), c1hsv);
	return distVal / 9.0;
}



float calcHsvColor1Distance(in VertData v_in)
{
	float dist = GetBoxFilteredHsvColor1Dist(v_in.uv);
	return dist;
}



float4 PSHsvColor1(VertData v_in) : TARGET
{
	float dist = calcHsvColor1Distance(v_in)
	float rgba = calcRgbaColorGreenFromHsvDistance(dist);
	return rgba;
}
//---------------------------------------------------------------------------










































































































































//---------------------------------------------------------------------------
technique hsvDrawColor1
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSHsvColor1(v_in);
	}
}


technique hsvDrawColor2
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKey2(v_in);
	}
}


technique hsvDrawDualSep
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKeyDualSep(v_in);
	}
}
//---------------------------------------------------------------------------

























































//---------------------------------------------------------------------------
technique DrawColor1
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKey1(v_in);
	}
}


technique DrawColor2
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKey2(v_in);
	}
}


technique DrawDualSep
{
	pass
	{
		vertex_shader = VSDefault(v_in);
		pixel_shader  = PSChromaKeyDualSep(v_in);
	}
}
//---------------------------------------------------------------------------

